# 0xb4cb800910b228ed3d0834cf79d697127bbb00e5 uniswap address for reference WETH/USDC

// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity ^0.8.29;
pragma abicoder v2;

import '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';
import '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';

contract SwapExamples {
    ISwapRouter public immutable swapRouter;

// Token contract addresses used for the WETH to USDC swap
    address public constant WETH = 0x4200000000000000000000000000000000000006;
 
    address public constant USDC = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;

    uint24 public constant poolFee = 10;

    constructor(ISwapRouter _swapRouter) {
        swapRouter = _swapRouter;
    }

    // @notice swapExactInputSingle swaps a fixed amount of WETH for a maximum possible amount of USDC
    // using the WETH/USDC 0.3% pool by calling `exactInputSingle` in the swap router.
    // @dev The calling address must approve this contract to spend at least `amountIn` worth of its WETH9 for this function to succeed.
    // @param amountIn The exact amount of WETH9 that will be swapped for USDC.
    // @return amountOut The amount of USDC received.
    function swapExactInputSingle(uint256 amountIn) external payable returns (uint256 amountOut) {
        // msg.sender must approve this contract

        // Transfer the specified amount of WETH9 to this contract.
        TransferHelper.safeTransferFrom(WETH, msg.sender, address(this), amountIn);

        // Approve the router to spend WETH9.
        TransferHelper.safeApprove(WETH, address(swapRouter), amountIn);

        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.
        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.
        ISwapRouter.ExactInputSingleParams memory params =
            ISwapRouter.ExactInputSingleParams({
                tokenIn: WETH,
                tokenOut: USDC,
                fee: poolFee,
                recipient: msg.sender,
                deadline: block.timestamp,
                amountIn: amountIn,
                amountOutMinimum: 0,
                sqrtPriceLimitX96: 0
            });

        // The call to `exactInputSingle` executes the swap.
        amountOut = swapRouter.exactInputSingle(params);
    }

    // @notice swapExactOutputSingle swaps a minimum possible amount of WETH9 for a fixed amount of USDC.
    // @dev The calling address must approve this contract to spend its WETH9 for this function to succeed. As the amount of input WETH9 is variable,
    // the calling address will need to approve for a slightly higher amount, anticipating some variance.
    // @param amountOut The exact amount of USDC to receive from the swap.
    // @param amountInMaximum The amount of WETH9 we are willing to spend to receive the specified amount of USDC.
    // @return amountIn The amount of WETH9 actually spent in the swap.
    function swapExactOutputSingle(uint256 amountOut, uint256 amountInMaximum) external payable returns (uint256 amountIn) {
        // Transfer the specified amount of WETH9 to this contract.
        TransferHelper.safeTransferFrom(WETH, msg.sender, address(this), amountInMaximum);

        // Approve the router to spend the specified `amountInMaximum` of WETH9.
        // In production, you should choose the maximum amount to spend based on oracles or other data sources to achieve a better swap.
        TransferHelper.safeApprove(WETH, address(swapRouter), amountInMaximum);

        ISwapRouter.ExactOutputSingleParams memory params =
            ISwapRouter.ExactOutputSingleParams({
                tokenIn: WETH,
                tokenOut: USDC,
                fee: poolFee,
                recipient: msg.sender,
                deadline: block.timestamp,
                amountOut: amountOut,
                amountInMaximum: amountInMaximum,
                sqrtPriceLimitX96: 0
            });

        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.
        amountIn = swapRouter.exactOutputSingle(params);

        // For exact output swaps, the amountInMaximum may not have all been spent.
        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.
        if (amountIn < amountInMaximum) {
            TransferHelper.safeApprove(WETH, address(swapRouter), 0);
            TransferHelper.safeTransfer(WETH, msg.sender, amountInMaximum - amountIn);
        }
    }
}
